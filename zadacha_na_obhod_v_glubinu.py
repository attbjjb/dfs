# Направления движения шахматного коня
DX = [1, 2, 1, 2, -1, -2, -1, -2]
DY = [2, 1, -2, -1, 2, 1, -2, -1]

# Чтение размеров поля
n, m = map(int, input().split())
# Чтение описания поля
field = [input() for _ in range(n)]
# Инициализация матрицы посещенных клеток
visited = [[False] * m for _ in range(n)]

# Функция для обхода в глубину (DFS)
def dfs(x, y):
    visited[x][y] = True  # Помечаем текущую клетку как посещенную
    for dir in range(8):  # Проходим по всем возможным направлениям движения коня
        nx = x + DX[dir]  # Вычисляем новую координату x
        ny = y + DY[dir]  # Вычисляем новую координату y
        # Проверяем, находится ли новая клетка в пределах поля, является ли она пустой и не была ли она посещена
        if (0 <= nx < n and 0 <= ny < m and field[nx][ny] == '.' and not visited[nx][ny]):
            dfs(nx, ny)  # Рекурсивно вызываем DFS для новой клетки

# Находим координаты конюшни и запускаем DFS
for x, row in enumerate(field):
    for y, cell in enumerate(row):
        if cell == 'X':  # Если нашли конюшню
            dfs(x, y)  # Запускаем DFS из этой клетки

# Подсчитываем количество прогулочных клеток
marked = sum(sum(row) for row in visited)  # Суммируем количество посещенных клеток
print(marked - 1)  # Выводим количество прогулочных клеток, исключая саму конюшню


